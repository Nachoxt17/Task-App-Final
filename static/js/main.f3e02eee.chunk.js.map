{"version":3,"sources":["components/TaskRow.js","components/TaskBanner.js","components/TaskCreator.js","components/VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TaskRow","props","key","task","name","type","checked","done","onChange","toggleTask","TaskBanner","className","userName","taskItems","filter","t","length","TaskCreator","useState","newTaskName","setNewTaskName","value","event","target","onClick","callback","VisibilityControl","isChecked","e","htmlFor","App","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","taskName","find","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f3e02eee.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const TaskRow = (props) => (\r\n        <tr key={props.task.name}>\r\n          <td>{props.task.name}</td>\r\n          <td>\r\n              <input type=\"checkbox\" checked={props.task.done} \r\n              onChange={() => props.toggleTask(props.task)} />\r\n          </td>\r\n        </tr>\r\n);","import React from 'react';\r\n\r\nexport const TaskBanner = (props) => (\r\n    <h4 className=\"bg-primary text-white text center p-4\">{props.userName}'s Task App - {props.taskItems.filter(t => !t.done).length} tasks to do.</h4>\r\n);","import React, { useState } from 'react';\r\n\r\nexport const TaskCreator = (props) => {\r\n\r\n    const [newTaskName, setNewTaskName] = useState('');\r\n\r\n    const updateNewTaskValue = event => setNewTaskName(event.target.value);\r\n\r\n    const createNewTask = () => {\r\n        props.callback(newTaskName);\r\n        setNewTaskName('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"my-1\">\r\n            <input type=\"text\" className=\"form-control\" \r\n            value={newTaskName} onChange={updateNewTaskValue} \r\n            />\r\n            <button className=\"btn btn-dark mt-1\" onClick={createNewTask} >\r\n                Add a Task\r\n            </button>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport const VisibilityControl = (props) => {\r\n    return (\r\n        <div className=\"form-check\">\r\n            <input type=\"checkbox\" className=\"form-check-input\" \r\n            checked={props.isChecked} \r\n            onChange={e => props.callback(e.target.checked)} \r\n            />\r\n            <label htmlFor=\"form-check-label\">\r\n                Show Completed Task\r\n            </label>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\nimport { TaskRow } from './components/TaskRow.js';\nimport { TaskBanner } from './components/TaskBanner.js';\nimport { TaskCreator } from './components/TaskCreator.js';\nimport { VisibilityControl } from './components/VisibilityControl.js';\n\nfunction App() {\n\n  const [userName, setUserName] = useState('Ignacio C.');\n  const [taskItems, setTaskItems] = useState([\n    {name: 'Task One', done: false},\n    {name: 'Task Two', done: false},\n    {name: 'Task Three', done: true},\n    {name: 'Task Four', done: false}\n  ]);\n  const [showCompleted, setShowCompleted] = useState(true);\n\n  useEffect(() => {\n    let data = localStorage.getItem('tasks');\n    if (data != null) {\n      setTaskItems(JSON.parse(data));\n    } else {\n      setTaskItems([\n        {name: 'Task One Example', done: false},\n        {name: 'Task Two Example', done: false},\n        {name: 'Task Three Example', done: true},\n        {name: 'Task Four Example', done: false}\n      ]);\n      setShowCompleted(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems))\n  }, [taskItems]);\n\n  const createNewTask = (taskName) => {\n    if (!taskItems.find(t => t.name === taskName)) {\n      setTaskItems([...taskItems, {name: taskName, done: false}]);\n    } if (taskItems.find(t => t.name === taskName)) {\n      alert('You already have a Task with this Name.');\n    }\n  }\n\n  const toggleTask = (task) => (\n    setTaskItems(taskItems.map(t => (t.name === task.name ? {...t, done: !t.done} : t)))\n  );\n\n  const taskTableRows = (doneValue) => {\n    return taskItems\n              .filter(task => task.done === doneValue)\n              .map(task => (\n              <TaskRow task={task} key={task.name} toggleTask={toggleTask} />\n    ));\n  }\n\n  return (\n    <div className=\"App\">\n      <TaskBanner userName={userName} taskItems={taskItems} />\n      <TaskCreator callback={createNewTask} />\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Done</th>\n          </tr>\n        </thead>\n        <tbody>\n          {taskTableRows(false)}\n        </tbody>\n      </table>\n      <div className=\"bg-secondary text-white text-center p-2\">\n        <VisibilityControl isChecked={showCompleted} \n        callback={checked => setShowCompleted(checked)} \n        />\n      </div>\n      {\n        showCompleted && (\n          <table className=\"table table-striped table-bordered\" >\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>\n              {taskTableRows(true)}\n            </tbody>\n          </table>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}